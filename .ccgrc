#!/bin/sh

###################################################
### Functions
###################################################

# append_path() and prepend_path() adapted from Fink's init.sh

# add to end of path
append_path()
{
    if eval test -z "\$$1"
    then
        eval "export $1=$2"
    fi

    if ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\""
    then
        eval "export $1=\$$1:$2"
    fi
}

# add to beginning of path
prepend_path()
{
    if eval test -z "\$$1"
    then
      eval "export $1=$2"
      return
    fi

    if ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\""
    then
      eval "export $1=$2:\$$1"
    fi
}

prepend_path_if_exists()
{
    if [ -d "$2" ]
    then
        prepend_path $1 $2
    fi
}

# PyDev goodies
export PYDEV_DIR="$HOME/src/pydev"

pydev_update() {
    if [ -d "$PYDEV_DIR" ]
    then
        pushd "$PYDEV_DIR"
        source "bin/.bashrc"
        popd
    fi
}

###################################################
### PATH-type list variables
###################################################

for i in /opt/*/bin
do
    prepend_path_if_exists PATH $i
done

prepend_path PATH $HOME/bin

for i in $HOME/opt/*/bin
do
    prepend_path_if_exists PATH $i
done

append_path PYTHONPATH .

###################################################
### Simple variables
###################################################

if [ -z "$HOST" ]
then
    HOST=$(hostname | sed 's/\..*//')
fi

export EDITOR=vim
export VISUAL=vim

export LC_COLLATE="POSIX"

if [ "$TERM" == "xterm" ]
then
    export TERM="xterm-color"
fi

# Change the window title of X terminals
case $TERM in
    xterm*|rxvt|Eterm|eterm)
        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
        ;;
    screen)
        PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"'
        ;;
esac

# Python stuff
export PIP_DOWNLOAD_CACHE="$HOME/.pip"
# I probably should have named that repo something other than 'dotfiles' if
# it's going to hold things like python scripts. Oh well.
export PYTHONSTARTUP="$HOME/src/dotfiles/readline.py"
# Note to self: as of Python 2.6, there is now support for local
# site-packages in ~/.local/. See PEP-370.


###################################################
### Aliases
###################################################

# My most common typo.
# Dear Ubuntu, please stop telling me to "sudo apt-get install sl"
alias sl=ls

alias mv='mv -iv'
alias cp='cp -iv'

alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias rgrep='rgrep --color=auto'
alias diff='colordiff'

alias dj='python ./manage.py runserver 0.0.0.0:8003'
alias djp='python ./manage.py runserver_plus 0.0.0.0:8003'
alias djc='python ./manage.py runserver 0.0.0.0:8003 --settings=settings_ccg'
alias djpc='python ./manage.py runserver_plus 0.0.0.0:8003 --settings=settings_ccg'
alias djs="python ./manage.py shell_plus"
alias djsc="python ./manage.py shell_plus --settings=settings_ccg"

alias lrz1='ssh -Ax -p 2222 cglendenin@75.127.96.44'
alias lrz2='ssh -Ax -p 2222 cglendenin@75.127.96.6'
alias lrz3='ssh -Ax -p 22 ccg@74.207.235.157'

alias hs1='ssh -Ax chadg@highsite1'
alias hs2='ssh -Ax ccg@highsite2'

alias attach="$HOME/bin/grabssh ; screen -d -r"
alias fixssh="source $HOME/bin/fixssh"

###################################################
### Platform- or system-specific modifications
###################################################

if [ "$(uname -s)" == "Darwin" ]; then
    # Mac OS X stuff:
    alias ls='ls -AFGq'
    append_path PYTHONPATH ~/Library/Python
    prepend_path PYTHONPATH .
    append_path PATH "$HOME/Applications/android-sdk-mac_86/tools"
    prepend_path PATH "/usr/local/sbin"
    # Make sure /usr/local/bin is before /usr/bin so that Homebrew's postgres
    # commands take precendence:
    prepend_path PATH "/usr/local/bin"
    # Fix Backspace/Delete confusion:
    stty erase ^?
    # XTerm's $MANPATH gets messed up, and I can't find where it's happening.
    # Screw it. Just reset the whole thing, cuz the default works.
    unset MANPATH
    BASH_GIT_COMPLETION="/usr/local/etc/bash_completion.d/git-completion.bash"
    alias mysql_start='/usr/local/share/mysql/mysql.server start'
    alias postgres_start='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
    export TM_RST2HTML='/Users/chad/env/TextMate/bin/rst2html.py'
else
    alias ls='ls -F --color=auto'
    BASH_GIT_COMPLETION="/etc/bash_completion.d/git"
fi

[ -f "$BASH_GIT_COMPLETION" ] && source "$BASH_GIT_COMPLETION"

###################################################
### virtualenvwrapper
###################################################
export WORKON_HOME=$HOME/env
if [ ! -d $WORKON_HOME ]
then
    mkdir -p $WORKON_HOME
fi
[ -f ~/.virtualenvwrapper_bashrc ] && source ~/.virtualenvwrapper_bashrc

###################################################
### git prompt hack
###################################################
# http://henrik.nyh.se/2008/12/git-dirty-prompt
# http://www.simplisticcomplexity.com/2008/03/13/show-your-git-branch-name-in-your-prompt/
#   username@Machine ~/dev/dir[master]$   # clean working directory
#   username@Machine ~/dev/dir[master*]$  # dirty working directory

function parse_git_dirty {
    [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}

function parse_git_branch {
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/ (Git branch: \1$(parse_git_dirty))/"
}

function active_virtualenv {
    if [ "$ACTIVE_VIRTUALENV" != "" ]
    then
        echo -n " (Virtualenv: $ACTIVE_VIRTUALENV)"
    fi
}

function install_pil {
    cdsitepackages || return 1
    ln -s "/usr/lib/python2.5/site-packages/PIL" .
    cd -
}

# Stolen from Gentoo:
#PS1="\[\033[01;32m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] "

# For now, my full PS1 is too slow for certain projects that have checked in
# multiple megabytes of static images into Git...
PS1_BASE="\n\[\033[01;32m\]\u@\h\[\033[01;34m\] \w\[\033[00m\]\$(active_virtualenv)"
export FASTER_PS1="${PS1_BASE}\n\$ "
export CCG_PS1="${PS1_BASE}\$(parse_git_branch)\n\$ "

PS1="$CCG_PS1"

# Finally, rvm magic:
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

append_path NODE_PATH /usr/local/lib/node
